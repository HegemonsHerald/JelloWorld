



Extra Task: Parse PN

parse( Operator, previousOperator )

   Op = Operator
   L  = Left hand value
   R  = Right hand value

   if L != N
	 LValue = parse( L, Operator )
   else  LValue = N
   
   if R != N
	 RValue = parse( L, Operator )
   else  RValue = N

   // An addition following a multiplication has to be parenthesized
   if previousOperator == * && Operator == +
      add( "(" + LValue + Op + RValue + ")" )
   else
      add( LValue + Op + RValue )

   // The other cases are:
   //   previous  current  parens?
   //       +        +       ✗
   //       +        *       ✗
   //       *        +       ✓
   //       *        *       ✗
   //
   // Heya boolean equation:
   // true be '== *'
   // previous be x
   // current  be y
   //    x & !y

// I think this should be super simple in haskell

// How boring, this isn't even a stack-based state-machine, technically.
// I simply use the call-stack to do all the state-business... How boring.







 vim:sts=2:sw=2

