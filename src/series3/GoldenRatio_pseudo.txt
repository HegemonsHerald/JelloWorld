

RATIO  = 1.618

width  = get_input
n      = get_input

height = produce_height(width)

drawGoldenRect(n, width, height)



drawGoldenRect(counter, w, h) {

	x = 0
	y = 0

	drawRect(x, y, w, h)


if   2 | counter	adjust width
if ! 2 | counter	adjust height

if   2 | counter && ! 4 | counter	move anchor
if ! 2 | counter &&   3 | counter	move anchor



IMPERATIVE

draw the first rectangle

for ( i=1; i<=n; i++ ) {

	if (i%2 == 0) {
		adjust width
		if ( !(i%4 == 0) ) { move anchor }

	} else {
		adjust height
		if (i%3 == 0) { move anchor }
	}

}


IMPERATIVE ENCODED WITH RECURSION:

wrapper(n, w, h) {

	drawRect(0, 0, w, h) // draw first rect

	goldenRatio(2, n, (x, y), (w, h));

}

goldenRatio(counter, reference, (anchor), (size)) {

	// same if's as in IMPERATIVE

	goldenRatio(...)

}


PROPERLY RECURSIVE APPROACH:

the simplest task is drawing no rectangles -> base case 1
the second simplest task is drawing 1 rect -> base case 2

n==0 => return 0
n==1 => drawRect(n,0,0,w,h) -> --n, (new anchor), (new size)

n>1  => call til base case, get drawing position



goldenRatio(n, (size)) {

	if (n == 0) { return }
	if (n == 1) {
		drawRect(0,0,size...);
	
	if (n > 1) {
		((anchor),(sizeNew)) = goldenRatio(--n, (size)
		drawRect((anchor),(sizeNew))

	return adjust(n, (anchor), (size))

}

adjust(n, (anchor), (size)) -> ((anchor,(sizeNew)) {

	check if conditions
	make adjustments
	return

}
